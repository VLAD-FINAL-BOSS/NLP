import streamlit as st
from transformers import BertTokenizer, BertForSequenceClassification
import torch


MODEL_PATH = "C:/Users/Msi/Python/NLP_Deploy/bert_toxic_classifier"

@st.cache_resource
def load_model():
    tokenizer = BertTokenizer.from_pretrained(MODEL_PATH)
    model = BertForSequenceClassification.from_pretrained(MODEL_PATH)
    return tokenizer, model

tokenizer, model = load_model()
model.eval()

st.title("üß† –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ (BERT)")

user_input = st.text_area("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")

if st.button("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å"):
    inputs = tokenizer(user_input, return_tensors="pt", truncation=True, padding=True)
    with torch.no_grad():
        outputs = model(**inputs)
        logits = outputs.logits
        probs = torch.softmax(logits, dim=1)
        toxic_prob = probs[0][1].item()

    st.write(f"üß™ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏: **{toxic_prob:.2%}**")
    if toxic_prob > 0.5:
        st.error("‚ö†Ô∏è –¢–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–∫—Å–∏—á–Ω—ã–º!")
    else:
        st.success("‚úÖ –¢–µ–∫—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º.")


